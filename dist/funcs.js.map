{"version":3,"sources":["../src/funcs.js"],"names":["createContext","contextName","context","obj","props","data","children","displayName","propTypes","any","oneOfType","object","array","childContextTypes","createControl","visibleFunc","control","visible","Boolean","visibleKey","Children","toArray","getVisibleData","c","type","string","contextTypes"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;AAEA;;;;;AAKO,IAAMA,wCAAgB,SAAhBA,aAAgB,CAACC,WAAD,EAAiB;;AAE5C;;;AAGA,MAAMC;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,wCAEc;AAChB,YAAMC,MAAM,EAAZ;;AAEAA,YAAIF,WAAJ,IAAmB,KAAKG,KAAL,CAAWC,IAA9B;;AAEA,eAAOF,GAAP;AACD;AARG;AAAA;AAAA,+BAUK;AACP,eAAO,KAAKC,KAAL,CAAWE,QAAlB;AACD;AAZG;;AAAA;AAAA,qBAAN;;AAgBAJ,UAAQK,WAAR,QAAyBN,WAAzB;;AAEAC,UAAQM,SAAR,GAAoB;AAClB,gBAAY,oBAAUC,GADJ;AAElB,YAAQ,oBAAUC,SAAV,CAAoB,CAC1B,oBAAUC,MADgB,EAE1B,oBAAUC,KAFgB,CAApB;AAFU,GAApB;;AAQA,MAAMC,oBAAoB,EAA1B;;AAEAA,oBAAkBZ,WAAlB,IAAiC,oBAAUS,SAAV,CAAoB,CACnD,oBAAUC,MADyC,EAEnD,oBAAUC,KAFyC,CAApB,CAAjC;;AAKAV,UAAQW,iBAAR,GAA4BA,iBAA5B;;AAEA;;;AAGA,MAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,WAAD,EAAiB;;AAErC;;;AAGA,QAAMC;AAAA;;AAEJ,uBAAYZ,KAAZ,EAAmB;AAAA;;AAAA,uHACXA,KADW;;AAEjB,eAAKa,OAAL,GAAeF,eAAgB,UAACV,IAAD;AAAA,iBAAUa,QAAQb,KAAK,OAAKD,KAAL,CAAWe,UAAhB,CAAR,CAAV;AAAA,SAA/B;AAFiB;AAGlB;;AAED;;;;;AAPI;AAAA;AAAA,yCAUa;AACf,iBAAO,KAAKjB,OAAL,CAAaD,WAAb,KAA6B,EAApC;AACD;AAZG;AAAA;AAAA,iCAcK;AACP,cAAMK,WAAW,gBAAMc,QAAN,CAAeC,OAAf,CAAuB,KAAKjB,KAAL,CAAWE,QAAlC,CAAjB;AACA,cAAI,KAAKW,OAAL,CAAa,KAAKK,cAAL,EAAb,CAAJ,EAAyC;AACvC,mBAAO,oBAAOhB,QAAP,EAAiB;AAAA,qBAAKiB,EAAEC,IAAF,uBAAL;AAAA,aAAjB,CAAP;AACD,WAFD,MAEO;AACL,mBAAO,oBAAOlB,QAAP,EAAiB;AAAA,qBAAKiB,EAAEC,IAAF,uBAAL;AAAA,aAAjB,KAA8C,IAArD;AACD;AACF;AArBG;;AAAA;AAAA,uBAAN;;AAyBAR,YAAQT,WAAR,GAAyBN,WAAzB;;AAEAe,YAAQR,SAAR,GAAoB;AAClB,kBAAY,oBAAUC,GADJ;AAElB,oBAAc,oBAAUgB;AAFN,KAApB;;AAKA,QAAMC,eAAe,EAArB;;AAEAA,iBAAazB,WAAb,IAA4B,oBAAUS,SAAV,CAAoB,CAC9C,oBAAUC,MADoC,EAE9C,oBAAUC,KAFoC,CAApB,CAA5B;;AAKAI,YAAQU,YAAR,GAAuBA,YAAvB;;AAEA,WAAOV,OAAP;AACD,GA/CD;;AAiDA,MAAMA,UAAUF,eAAhB;;AAEA,SAAO;AACLZ,oBADK;AAELc,oBAFK;AAGLF;AAHK,GAAP;AAKD,CAnGM;;kBAsGQ,EAAEd,4BAAF,E","file":"funcs.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { filter } from \"lodash\";\nimport Failback from './Fallback';\n\n/**\n * CreateContext\n *\n * @param {string} contextName the context name\n */\nexport const createContext = (contextName) => {\n\n  /**\n   * @augments {Component<{data:([]|object)}>}\n   */\n  const context = class extends Component {\n\n    getChildContext() {\n      const obj = {};\n\n      obj[contextName] = this.props.data;\n\n      return obj;\n    }\n\n    render() {\n      return this.props.children;\n    }\n\n  };\n\n  context.displayName = `${contextName}`;\n\n  context.propTypes = {\n    \"children\": PropTypes.any,\n    \"data\": PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.array\n    ])\n  };\n\n  const childContextTypes = {};\n\n  childContextTypes[contextName] = PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array\n  ]);\n\n  context.childContextTypes = childContextTypes;\n\n  /**\n   * @param {function(object):boolean} visibleFunc\n   */\n  const createControl = (visibleFunc) => {\n\n    /**\n     * @augments {Component<{visibleKey:string},{}>}\n     */\n    const control = class extends Component {\n\n      constructor(props) {\n        super(props);\n        this.visible = visibleFunc || ((data) => Boolean(data[this.props.visibleKey]));\n      }\n\n      /**\n       * Get Visible Context\n       */\n      getVisibleData() {\n        return this.context[contextName] || {};\n      }\n\n      render() {\n        const children = React.Children.toArray(this.props.children);\n        if (this.visible(this.getVisibleData())) {\n          return filter(children, c => c.type !== Failback);\n        } else {\n          return filter(children, c => c.type === Failback) || null\n        }\n      }\n\n    };\n\n    control.displayName = `${contextName}Control`;\n\n    control.propTypes = {\n      \"children\": PropTypes.any,\n      \"visibleKey\": PropTypes.string\n    };\n\n    const contextTypes = {};\n\n    contextTypes[contextName] = PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.array\n    ]);\n\n    control.contextTypes = contextTypes;\n\n    return control;\n  };\n\n  const control = createControl();\n\n  return {\n    context,\n    control,\n    createControl\n  };\n};\n\n\nexport default { createContext };\n"]}